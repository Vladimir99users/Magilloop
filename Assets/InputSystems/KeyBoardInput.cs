//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/InputSystems/KeyBoardInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyBoardInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyBoardInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyBoardInput"",
    ""maps"": [
        {
            ""name"": ""KeyBoardContoller"",
            ""id"": ""08fea444-e043-44f7-931c-6da5580a01d6"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""5e53001a-680f-4c7b-82c4-ec42657ba331"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CraftMenu"",
                    ""type"": ""Button"",
                    ""id"": ""cf8cce78-e1e5-43e0-a9ea-abdb05f781cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c416ec56-abcd-44dc-b1f3-5dc5dcb32dec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RadialMenu"",
                    ""type"": ""Button"",
                    ""id"": ""21ca911a-20e3-4338-ace5-688e79dd791c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookMouse"",
                    ""type"": ""Value"",
                    ""id"": ""57f4e174-0cab-488e-88fa-5765e5e9a14c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""91f284d1-5170-43a2-ae31-fbf167c5fb33"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""CraftMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17fb070d-c092-49aa-aa78-ea302009ba70"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""RadialMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c2a4fca-84ac-4bbb-9c38-a47daa43de09"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""73b01328-e486-473c-97c7-d3cdc45e349e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""febfeaf5-c350-4a35-80c3-97551dc016fb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""89f356e3-2cc9-4c4b-8171-033dca27f017"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2a30ea9c-8288-40be-9a57-115ecb124f3d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c32c370b-d6a0-4868-925d-2edb301a6040"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""id"": ""9057964e-32cc-4a67-8734-5e7d45370db4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""af9a2bde-d560-43ef-999e-8a85eef80ebe"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3e716d59-fc01-400b-b61b-0d2ecd0b2f3c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c9fff2c6-5987-4a76-b47a-75606ee14b69"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2b503717-0448-45de-b466-6ffe5a1f01e8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08a48483-f7de-4254-9577-802346ce9afe"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MovePlayer_KeyBoard_And_Mouse"",
                    ""action"": ""LookMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIController"",
            ""id"": ""3b6994b1-0a23-4664-8e5e-7bb04261f0ef"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""c0030d2f-587e-47e7-b0b4-8233901bf3da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MovePlayer_KeyBoard_And_Mouse"",
            ""bindingGroup"": ""MovePlayer_KeyBoard_And_Mouse"",
            ""devices"": []
        }
    ]
}");
        // KeyBoardContoller
        m_KeyBoardContoller = asset.FindActionMap("KeyBoardContoller", throwIfNotFound: true);
        m_KeyBoardContoller_WASD = m_KeyBoardContoller.FindAction("WASD", throwIfNotFound: true);
        m_KeyBoardContoller_CraftMenu = m_KeyBoardContoller.FindAction("CraftMenu", throwIfNotFound: true);
        m_KeyBoardContoller_Fire = m_KeyBoardContoller.FindAction("Fire", throwIfNotFound: true);
        m_KeyBoardContoller_RadialMenu = m_KeyBoardContoller.FindAction("RadialMenu", throwIfNotFound: true);
        m_KeyBoardContoller_LookMouse = m_KeyBoardContoller.FindAction("LookMouse", throwIfNotFound: true);
        // UIController
        m_UIController = asset.FindActionMap("UIController", throwIfNotFound: true);
        m_UIController_Newaction = m_UIController.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyBoardContoller
    private readonly InputActionMap m_KeyBoardContoller;
    private IKeyBoardContollerActions m_KeyBoardContollerActionsCallbackInterface;
    private readonly InputAction m_KeyBoardContoller_WASD;
    private readonly InputAction m_KeyBoardContoller_CraftMenu;
    private readonly InputAction m_KeyBoardContoller_Fire;
    private readonly InputAction m_KeyBoardContoller_RadialMenu;
    private readonly InputAction m_KeyBoardContoller_LookMouse;
    public struct KeyBoardContollerActions
    {
        private @KeyBoardInput m_Wrapper;
        public KeyBoardContollerActions(@KeyBoardInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_KeyBoardContoller_WASD;
        public InputAction @CraftMenu => m_Wrapper.m_KeyBoardContoller_CraftMenu;
        public InputAction @Fire => m_Wrapper.m_KeyBoardContoller_Fire;
        public InputAction @RadialMenu => m_Wrapper.m_KeyBoardContoller_RadialMenu;
        public InputAction @LookMouse => m_Wrapper.m_KeyBoardContoller_LookMouse;
        public InputActionMap Get() { return m_Wrapper.m_KeyBoardContoller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardContollerActions set) { return set.Get(); }
        public void SetCallbacks(IKeyBoardContollerActions instance)
        {
            if (m_Wrapper.m_KeyBoardContollerActionsCallbackInterface != null)
            {
                @WASD.started -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnWASD;
                @WASD.performed -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnWASD;
                @WASD.canceled -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnWASD;
                @CraftMenu.started -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnCraftMenu;
                @CraftMenu.performed -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnCraftMenu;
                @CraftMenu.canceled -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnCraftMenu;
                @Fire.started -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnFire;
                @RadialMenu.started -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnRadialMenu;
                @RadialMenu.performed -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnRadialMenu;
                @RadialMenu.canceled -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnRadialMenu;
                @LookMouse.started -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnLookMouse;
                @LookMouse.performed -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnLookMouse;
                @LookMouse.canceled -= m_Wrapper.m_KeyBoardContollerActionsCallbackInterface.OnLookMouse;
            }
            m_Wrapper.m_KeyBoardContollerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @WASD.started += instance.OnWASD;
                @WASD.performed += instance.OnWASD;
                @WASD.canceled += instance.OnWASD;
                @CraftMenu.started += instance.OnCraftMenu;
                @CraftMenu.performed += instance.OnCraftMenu;
                @CraftMenu.canceled += instance.OnCraftMenu;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @RadialMenu.started += instance.OnRadialMenu;
                @RadialMenu.performed += instance.OnRadialMenu;
                @RadialMenu.canceled += instance.OnRadialMenu;
                @LookMouse.started += instance.OnLookMouse;
                @LookMouse.performed += instance.OnLookMouse;
                @LookMouse.canceled += instance.OnLookMouse;
            }
        }
    }
    public KeyBoardContollerActions @KeyBoardContoller => new KeyBoardContollerActions(this);

    // UIController
    private readonly InputActionMap m_UIController;
    private IUIControllerActions m_UIControllerActionsCallbackInterface;
    private readonly InputAction m_UIController_Newaction;
    public struct UIControllerActions
    {
        private @KeyBoardInput m_Wrapper;
        public UIControllerActions(@KeyBoardInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UIController_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UIController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIControllerActions set) { return set.Get(); }
        public void SetCallbacks(IUIControllerActions instance)
        {
            if (m_Wrapper.m_UIControllerActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_UIControllerActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_UIControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public UIControllerActions @UIController => new UIControllerActions(this);
    private int m_MovePlayer_KeyBoard_And_MouseSchemeIndex = -1;
    public InputControlScheme MovePlayer_KeyBoard_And_MouseScheme
    {
        get
        {
            if (m_MovePlayer_KeyBoard_And_MouseSchemeIndex == -1) m_MovePlayer_KeyBoard_And_MouseSchemeIndex = asset.FindControlSchemeIndex("MovePlayer_KeyBoard_And_Mouse");
            return asset.controlSchemes[m_MovePlayer_KeyBoard_And_MouseSchemeIndex];
        }
    }
    public interface IKeyBoardContollerActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnCraftMenu(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnRadialMenu(InputAction.CallbackContext context);
        void OnLookMouse(InputAction.CallbackContext context);
    }
    public interface IUIControllerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
